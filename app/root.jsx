import {
  Link,
  Links,
  LiveReload,
  Meta,
  Outlet,
  Scripts,
  ScrollRestoration,
  useCatch,
  useMatches,
} from '@remix-run/react';

import sharedStyles from '~/styles/shared.css';
import Error from './components/util/Error';

// This is a generic metadata that acts as a fallback
// Metadata defined in child routes overtakes any metadata set by the parent
export const meta = () => ({
  charset: 'utf-8',
  title: 'RemixExpenses',
  viewport: 'width=device-width,initial-scale=1',
});

// Since <body> of App and the rest of the functions(CatchBoundary(), ErrorBoundary()) shares similar structure, we can create a function() for that structure and call it on those functions()
// This function() does not need to be export out so we can omit the word

// The differences for all of the functions will be their title and children(normal content or error content)
function Document({ title, children }) {
  const matches = useMatches();
  const disableJS = matches.some((match) => match.handle?.disableJS);
  return (
    <html lang="en">
      <head>
        {title && <title>{title}</title>}
        <Meta />
        <Links />
        <link rel="preconnect" href="https://fonts.googleapis.com" />
        <link
          rel="preconnect"
          href="https://fonts.gstatic.com"
          crossOrigin="true"
        />
        <link
          href="https://fonts.googleapis.com/css2?family=Rubik:wght@400;700&display=swap"
          rel="stylesheet"
        />
      </head>
      <body>
        {children}
        <ScrollRestoration />
        {!disableJS && <Scripts />}
        <LiveReload />
      </body>
    </html>
  );
}

export default function App() {
  return (
    <Document>
      {/* This Outlet is coming from _marketing.jsx which is coming from _marketing/index.jsx */}
      <Outlet />
    </Document>
  );
}

// In charge of response errors
// CatchBoundary has an error object as an argument that contains information about the error
// Example of this error can come from the expenses.server.js
// Right now, we are handling errors via 'throw error' inside of the catch block of all CRUD functions
// If any of the them were to trigger, the object from 'throw error' will be passed down to this function
export function CatchBoundary() {
  const caughtError = useCatch();
  return (
    <Document title="An error has occured">
      <main>
        <Error title="An error has occured">
          <p>
            {/* The Not Found text seen on the front-end is automatically generated by Remix */}
            {caughtError.data?.message ||
              'Something went wrong. Please try again later...'}
          </p>
          <p>
            Back to <Link to="/">safety</Link>.
          </p>
        </Error>
      </main>
    </Document>
  );
}

// In charge of any unhandled error generated anywhere in the app
export function ErrorBoundary({ error }) {
  console.log(error);
  return (
    <Document title="An error has occured">
      <main>
        <Error title="An error has occured">
          <p>
            {/* The Not Found text seen on the front-end is automatically generated by Remix */}
            {error.message || 'Something went wrong. Please try again later...'}
          </p>
          <p>
            Back to <Link to="/">safety</Link>.
          </p>
        </Error>
      </main>
    </Document>
  );
}
// This is still a route file therefore links() can be called and used
export function links() {
  return [{ rel: 'stylesheet', href: sharedStyles }];
}
