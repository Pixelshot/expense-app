import { createCookieSessionStorage, redirect } from '@remix-run/node';
import { prisma } from './database.server';
import { compare, hash } from 'bcryptjs';

const SESSION_SECRET = process.env.SESSION_SECRET;

// Cookie settings
const sessionStorage = createCookieSessionStorage({
  cookie: {
    secure: process.env.NODE_ENV === 'production', // to bypass https requirement when in production mode. This is also a nodejs settings. Not specific to Remix
    secrets: [SESSION_SECRET], // To crosscheck with the session received from front-end is the same as back-end
    sameSite: 'lax', // Protecting users from making unwilling/unknown requests generated by third party sites
    maxAge: 30 * 24 * 60 * 60, // Cookie validation. This is timespan calculated against seconds. This equation grants the cookie validation for 30 days
    httpOnly: true, // To ensure client side javascript cannot access this cookie
  },
});

async function createUserSession(userId, redirectPath) {
  const session = await sessionStorage.getSession(); // getSession() is a function provided by Remix to handle session for us
  session.set('userId', userId);
  return redirect(redirectPath, {
    headers: {
      'Set-Cookie': await sessionStorage.commitSession(session),
    },
  });
}

export async function signup({ email, password }) {
  const existingUser = await prisma.user.findFirst({ where: { email } });

  if (existingUser) {
    const error = new Error('User with provided email already exists');
    error.status = 422;
    throw error;
  }

  const hashedPassword = await hash(password, 12);
  // The second argument is the number of salt rounds
  // In our case we set it to 12

  const user = await prisma.user.create({
    data: { email: email, password: hashedPassword },
  });

  return createUserSession(user.id, '/expenses');
}

export async function login({ email, password }) {
  const existingUser = await prisma.user.findFirst({ where: { email } });
  const matchingPass = await compare(password, existingUser.password); // compare function is used to compare entered password against the hashed password of the user in the database.

  if (!existingUser) {
    const error = new Error(
      'Could not log you in. Please check your credentials'
    );
    error.status = 401;
    throw error;
  }

  if (!matchingPass) {
    const error = new Error(
      'Unmatched password. Please check your credentials'
    );
    error.status = 401;
    throw error;
  }

  return createUserSession(existingUser.id, '/expenses');
}
